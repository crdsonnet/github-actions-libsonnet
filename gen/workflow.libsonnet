{
  '#withConcurrency': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string', 'object'] }], help: 'Concurrency ensures that only a single job or workflow using the same concurrency group will run at a time. A concurrency group can be any string or expression. The expression can use any context except for the secrets context. \nYou can also specify concurrency at the workflow level. \nWhen a concurrent job or workflow is queued, if another job or workflow using the same concurrency group in the repository is in progress, the queued job or workflow will be pending. Any previously pending job or workflow in the concurrency group will be canceled. To also cancel any currently running job or workflow in the same concurrency group, specify cancel-in-progress: true.' } },
  withConcurrency(value): { concurrency: value },
  '#withConcurrencyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string', 'object'] }], help: 'Concurrency ensures that only a single job or workflow using the same concurrency group will run at a time. A concurrency group can be any string or expression. The expression can use any context except for the secrets context. \nYou can also specify concurrency at the workflow level. \nWhen a concurrent job or workflow is queued, if another job or workflow using the same concurrency group in the repository is in progress, the queued job or workflow will be pending. Any previously pending job or workflow in the concurrency group will be canceled. To also cancel any currently running job or workflow in the same concurrency group, specify cancel-in-progress: true.' } },
  withConcurrencyMixin(value): { concurrency+: value },
  concurrency+:
    {
      '#withConcurrency': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withConcurrency(value): { concurrency: value },
      '#withConcurrencyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withConcurrencyMixin(value): { concurrency+: value },
      concurrency+:
        {
          '#withCancelInProgress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['boolean', 'string'] }], help: 'To cancel any currently running job or workflow in the same concurrency group, specify cancel-in-progress: true.' } },
          withCancelInProgress(value): { concurrency+: { 'cancel-in-progress': value } },
          '#withCancelInProgressMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['boolean', 'string'] }], help: 'To cancel any currently running job or workflow in the same concurrency group, specify cancel-in-progress: true.' } },
          withCancelInProgressMixin(value): { concurrency+: { 'cancel-in-progress'+: value } },
          'cancel-in-progress'+:
            {
              '#withExpressionSyntax': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withExpressionSyntax(value): { concurrency+: { 'cancel-in-progress'+: { expressionSyntax: value } } },
            },
          '#withGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'When a concurrent job or workflow is queued, if another job or workflow using the same concurrency group in the repository is in progress, the queued job or workflow will be pending. Any previously pending job or workflow in the concurrency group will be canceled.' } },
          withGroup(value): { concurrency+: { group: value } },
        },
    },
  '#withDefaults': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
  withDefaults(value): { defaults: value },
  '#withDefaultsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
  withDefaultsMixin(value): { defaults+: value },
  defaults+:
    {
      '#withRun': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withRun(value): { defaults+: { run: value } },
      '#withRunMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withRunMixin(value): { defaults+: { run+: value } },
      run+:
        {
          '#withShell': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string', 'string'] }], help: "You can override the default shell settings in the runner's operating system using the shell keyword. You can use built-in shell keywords, or you can define a custom set of shell options." } },
          withShell(value): { defaults+: { run+: { shell: value } } },
          '#withShellMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string', 'string'] }], help: "You can override the default shell settings in the runner's operating system using the shell keyword. You can use built-in shell keywords, or you can define a custom set of shell options." } },
          withShellMixin(value): { defaults+: { run+: { shell+: value } } },
          '#withWorkingDirectory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Using the working-directory keyword, you can specify the working directory of where to run the command.' } },
          withWorkingDirectory(value): { defaults+: { run+: { 'working-directory': value } } },
        },
    },
  '#withEnv': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'string'] }], help: 'To set custom environment variables, you need to specify the variables in the workflow file. You can define environment variables for a step, job, or entire workflow using the jobs.<job_id>.steps[*].env, jobs.<job_id>.env, and env keywords. For more information, see https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#jobsjob_idstepsenv' } },
  withEnv(value): { env: value },
  '#withEnvMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'string'] }], help: 'To set custom environment variables, you need to specify the variables in the workflow file. You can define environment variables for a step, job, or entire workflow using the jobs.<job_id>.steps[*].env, jobs.<job_id>.env, and env keywords. For more information, see https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#jobsjob_idstepsenv' } },
  withEnvMixin(value): { env+: value },
  env+:
    {
      '#withStringContainingExpressionSyntax': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStringContainingExpressionSyntax(value): { env+: { stringContainingExpressionSyntax: value } },
    },
  '#withJobs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: 'A workflow run is made up of one or more jobs. Jobs run in parallel by default. To run jobs sequentially, you can define dependencies on other jobs using the jobs.<job_id>.needs keyword.\nEach job runs in a fresh instance of the virtual environment specified by runs-on.\nYou can run an unlimited number of jobs as long as you are within the workflow usage limits. For more information, see https://help.github.com/en/github/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#usage-limits.' } },
  withJobs(value): { jobs: value },
  '#withJobsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: 'A workflow run is made up of one or more jobs. Jobs run in parallel by default. To run jobs sequentially, you can define dependencies on other jobs using the jobs.<job_id>.needs keyword.\nEach job runs in a fresh instance of the virtual environment specified by runs-on.\nYou can run an unlimited number of jobs as long as you are within the workflow usage limits. For more information, see https://help.github.com/en/github/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#usage-limits.' } },
  withJobsMixin(value): { jobs+: value },
  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: "The name of your workflow. GitHub displays the names of your workflows on your repository's actions page. If you omit this field, GitHub sets the name to the workflow's filename." } },
  withName(value): { name: value },
  '#withOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string', 'array', 'object'] }], help: 'The name of the GitHub event that triggers the workflow. You can provide a single event string, array of events, array of event types, or an event configuration map that schedules a workflow or restricts the execution of a workflow to specific files, tags, or branch changes. For a list of available events, see https://help.github.com/en/github/automating-your-workflow-with-github-actions/events-that-trigger-workflows.' } },
  withOn(value): { on: value },
  '#withOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string', 'array', 'object'] }], help: 'The name of the GitHub event that triggers the workflow. You can provide a single event string, array of events, array of event types, or an event configuration map that schedules a workflow or restricts the execution of a workflow to specific files, tags, or branch changes. For a list of available events, see https://help.github.com/en/github/automating-your-workflow-with-github-actions/events-that-trigger-workflows.' } },
  withOnMixin(value): { on+: value },
  on+:
    {
      '#withEvent': { 'function': { args: [{ default: null, enums: ['branch_protection_rule', 'check_run', 'check_suite', 'create', 'delete', 'deployment', 'deployment_status', 'discussion', 'discussion_comment', 'fork', 'gollum', 'issue_comment', 'issues', 'label', 'member', 'milestone', 'page_build', 'project', 'project_card', 'project_column', 'public', 'pull_request', 'pull_request_review', 'pull_request_review_comment', 'pull_request_target', 'push', 'registry_package', 'release', 'status', 'watch', 'workflow_call', 'workflow_dispatch', 'workflow_run', 'repository_dispatch'], name: 'value', type: ['string'] }], help: '' } },
      withEvent(value): { on+: { event: value } },
      '#withBranchProtectionRule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withBranchProtectionRule(value): { on+: { branch_protection_rule: value } },
      '#withBranchProtectionRuleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withBranchProtectionRuleMixin(value): { on+: { branch_protection_rule+: value } },
      '#withCheckRun': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withCheckRun(value): { on+: { check_run: value } },
      '#withCheckRunMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withCheckRunMixin(value): { on+: { check_run+: value } },
      '#withCheckSuite': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withCheckSuite(value): { on+: { check_suite: value } },
      '#withCheckSuiteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withCheckSuiteMixin(value): { on+: { check_suite+: value } },
      '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withCreate(value): { on+: { create: value } },
      '#withCreateMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withCreateMixin(value): { on+: { create+: value } },
      '#withDelete': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withDelete(value): { on+: { delete: value } },
      '#withDeleteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withDeleteMixin(value): { on+: { delete+: value } },
      '#withDeployment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withDeployment(value): { on+: { deployment: value } },
      '#withDeploymentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withDeploymentMixin(value): { on+: { deployment+: value } },
      '#withDeploymentStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withDeploymentStatus(value): { on+: { deployment_status: value } },
      '#withDeploymentStatusMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withDeploymentStatusMixin(value): { on+: { deployment_status+: value } },
      '#withDiscussion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withDiscussion(value): { on+: { discussion: value } },
      '#withDiscussionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withDiscussionMixin(value): { on+: { discussion+: value } },
      '#withDiscussionComment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withDiscussionComment(value): { on+: { discussion_comment: value } },
      '#withDiscussionCommentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withDiscussionCommentMixin(value): { on+: { discussion_comment+: value } },
      '#withFork': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withFork(value): { on+: { fork: value } },
      '#withForkMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withForkMixin(value): { on+: { fork+: value } },
      '#withGollum': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withGollum(value): { on+: { gollum: value } },
      '#withGollumMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withGollumMixin(value): { on+: { gollum+: value } },
      '#withIssueComment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withIssueComment(value): { on+: { issue_comment: value } },
      '#withIssueCommentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withIssueCommentMixin(value): { on+: { issue_comment+: value } },
      '#withIssues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withIssues(value): { on+: { issues: value } },
      '#withIssuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withIssuesMixin(value): { on+: { issues+: value } },
      '#withLabel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withLabel(value): { on+: { label: value } },
      '#withLabelMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withLabelMixin(value): { on+: { label+: value } },
      '#withMember': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withMember(value): { on+: { member: value } },
      '#withMemberMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withMemberMixin(value): { on+: { member+: value } },
      '#withMergeGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withMergeGroup(value): { on+: { merge_group: value } },
      '#withMergeGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withMergeGroupMixin(value): { on+: { merge_group+: value } },
      '#withMilestone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withMilestone(value): { on+: { milestone: value } },
      '#withMilestoneMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withMilestoneMixin(value): { on+: { milestone+: value } },
      '#withPageBuild': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withPageBuild(value): { on+: { page_build: value } },
      '#withPageBuildMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withPageBuildMixin(value): { on+: { page_build+: value } },
      '#withProject': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withProject(value): { on+: { project: value } },
      '#withProjectMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withProjectMixin(value): { on+: { project+: value } },
      '#withProjectCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withProjectCard(value): { on+: { project_card: value } },
      '#withProjectCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withProjectCardMixin(value): { on+: { project_card+: value } },
      '#withProjectColumn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withProjectColumn(value): { on+: { project_column: value } },
      '#withProjectColumnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withProjectColumnMixin(value): { on+: { project_column+: value } },
      '#withPublic': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withPublic(value): { on+: { public: value } },
      '#withPublicMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withPublicMixin(value): { on+: { public+: value } },
      '#withPullRequest': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withPullRequest(value): { on+: { pull_request: value } },
      '#withPullRequestMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withPullRequestMixin(value): { on+: { pull_request+: value } },
      '#withPullRequestReview': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withPullRequestReview(value): { on+: { pull_request_review: value } },
      '#withPullRequestReviewMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withPullRequestReviewMixin(value): { on+: { pull_request_review+: value } },
      '#withPullRequestReviewComment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withPullRequestReviewComment(value): { on+: { pull_request_review_comment: value } },
      '#withPullRequestReviewCommentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withPullRequestReviewCommentMixin(value): { on+: { pull_request_review_comment+: value } },
      '#withPullRequestTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withPullRequestTarget(value): { on+: { pull_request_target: value } },
      '#withPullRequestTargetMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withPullRequestTargetMixin(value): { on+: { pull_request_target+: value } },
      '#withPush': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withPush(value): { on+: { push: value } },
      '#withPushMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withPushMixin(value): { on+: { push+: value } },
      '#withRegistryPackage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withRegistryPackage(value): { on+: { registry_package: value } },
      '#withRegistryPackageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withRegistryPackageMixin(value): { on+: { registry_package+: value } },
      '#withRelease': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withRelease(value): { on+: { release: value } },
      '#withReleaseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withReleaseMixin(value): { on+: { release+: value } },
      '#withRepositoryDispatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withRepositoryDispatch(value): { on+: { repository_dispatch: value } },
      '#withRepositoryDispatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withRepositoryDispatchMixin(value): { on+: { repository_dispatch+: value } },
      '#withSchedule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: 'You can schedule a workflow to run at specific UTC times using POSIX cron syntax (https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07). Scheduled workflows run on the latest commit on the default or base branch. The shortest interval you can run scheduled workflows is once every 5 minutes.\nNote: GitHub Actions does not support the non-standard syntax @yearly, @monthly, @weekly, @daily, @hourly, and @reboot.\nYou can use crontab guru (https://crontab.guru/). to help generate your cron syntax and confirm what time it will run. To help you get started, there is also a list of crontab guru examples (https://crontab.guru/examples.html).' } },
      withSchedule(value): { on+: { schedule: (if std.isArray(value)
                                               then value
                                               else [value]) } },
      '#withScheduleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: 'You can schedule a workflow to run at specific UTC times using POSIX cron syntax (https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07). Scheduled workflows run on the latest commit on the default or base branch. The shortest interval you can run scheduled workflows is once every 5 minutes.\nNote: GitHub Actions does not support the non-standard syntax @yearly, @monthly, @weekly, @daily, @hourly, and @reboot.\nYou can use crontab guru (https://crontab.guru/). to help generate your cron syntax and confirm what time it will run. To help you get started, there is also a list of crontab guru examples (https://crontab.guru/examples.html).' } },
      withScheduleMixin(value): { on+: { schedule+: (if std.isArray(value)
                                                     then value
                                                     else [value]) } },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withStatus(value): { on+: { status: value } },
      '#withStatusMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withStatusMixin(value): { on+: { status+: value } },
      '#withWatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withWatch(value): { on+: { watch: value } },
      '#withWatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withWatchMixin(value): { on+: { watch+: value } },
      '#withWorkflowCall': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Allows workflows to be reused by other workflows.' } },
      withWorkflowCall(value): { on+: { workflow_call: value } },
      '#withWorkflowDispatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: "You can now create workflows that are manually triggered with the new workflow_dispatch event. You will then see a 'Run workflow' button on the Actions tab, enabling you to easily trigger a run." } },
      withWorkflowDispatch(value): { on+: { workflow_dispatch: value } },
      '#withWorkflowRun': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withWorkflowRun(value): { on+: { workflow_run: value } },
      '#withWorkflowRunMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object', 'null'] }], help: '' } },
      withWorkflowRunMixin(value): { on+: { workflow_run+: value } },
    },
  '#withPermissions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string', 'object'] }], help: 'You can modify the default permissions granted to the GITHUB_TOKEN, adding or removing access as required, so that you only allow the minimum required access.' } },
  withPermissions(value): { permissions: value },
  '#withPermissionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string', 'object'] }], help: 'You can modify the default permissions granted to the GITHUB_TOKEN, adding or removing access as required, so that you only allow the minimum required access.' } },
  withPermissionsMixin(value): { permissions+: value },
  permissions+:
    {
      '#withPermissionsEvent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withPermissionsEvent(value): { permissions+: { 'permissions-event': value } },
      '#withPermissionsEventMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withPermissionsEventMixin(value): { permissions+: { 'permissions-event'+: value } },
      'permissions-event'+:
        {
          '#withActions': { 'function': { args: [{ default: null, enums: ['read', 'write', 'none'], name: 'value', type: ['string'] }], help: '' } },
          withActions(value): { permissions+: { actions: value } },
          '#withChecks': { 'function': { args: [{ default: null, enums: ['read', 'write', 'none'], name: 'value', type: ['string'] }], help: '' } },
          withChecks(value): { permissions+: { checks: value } },
          '#withContents': { 'function': { args: [{ default: null, enums: ['read', 'write', 'none'], name: 'value', type: ['string'] }], help: '' } },
          withContents(value): { permissions+: { contents: value } },
          '#withDeployments': { 'function': { args: [{ default: null, enums: ['read', 'write', 'none'], name: 'value', type: ['string'] }], help: '' } },
          withDeployments(value): { permissions+: { deployments: value } },
          '#withDiscussions': { 'function': { args: [{ default: null, enums: ['read', 'write', 'none'], name: 'value', type: ['string'] }], help: '' } },
          withDiscussions(value): { permissions+: { discussions: value } },
          '#withIdToken': { 'function': { args: [{ default: null, enums: ['read', 'write', 'none'], name: 'value', type: ['string'] }], help: '' } },
          withIdToken(value): { permissions+: { 'id-token': value } },
          '#withIssues': { 'function': { args: [{ default: null, enums: ['read', 'write', 'none'], name: 'value', type: ['string'] }], help: '' } },
          withIssues(value): { permissions+: { issues: value } },
          '#withPackages': { 'function': { args: [{ default: null, enums: ['read', 'write', 'none'], name: 'value', type: ['string'] }], help: '' } },
          withPackages(value): { permissions+: { packages: value } },
          '#withPages': { 'function': { args: [{ default: null, enums: ['read', 'write', 'none'], name: 'value', type: ['string'] }], help: '' } },
          withPages(value): { permissions+: { pages: value } },
          '#withPullRequests': { 'function': { args: [{ default: null, enums: ['read', 'write', 'none'], name: 'value', type: ['string'] }], help: '' } },
          withPullRequests(value): { permissions+: { 'pull-requests': value } },
          '#withRepositoryProjects': { 'function': { args: [{ default: null, enums: ['read', 'write', 'none'], name: 'value', type: ['string'] }], help: '' } },
          withRepositoryProjects(value): { permissions+: { 'repository-projects': value } },
          '#withSecurityEvents': { 'function': { args: [{ default: null, enums: ['read', 'write', 'none'], name: 'value', type: ['string'] }], help: '' } },
          withSecurityEvents(value): { permissions+: { 'security-events': value } },
          '#withStatuses': { 'function': { args: [{ default: null, enums: ['read', 'write', 'none'], name: 'value', type: ['string'] }], help: '' } },
          withStatuses(value): { permissions+: { statuses: value } },
        },
    },
  '#withRunName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: "The name for workflow runs generated from the workflow. GitHub displays the workflow run name in the list of workflow runs on your repository's 'Actions' tab." } },
  withRunName(value): { 'run-name': value },
}
